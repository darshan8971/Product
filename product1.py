# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qHDqPnSKDXz9WtSfcZtQyPCyPPSLzhhP
"""

import pickle
##!pip install streamlit

model = pickle.load(open('/mount/src/product/product.pkl','rb'))
model

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.sparse import csr_matrix
import pickle
st.title("üõí Product Recommendation & Clustering System")

st.sidebar.header("/content/sample_data/ratings.csv")

uploaded_file = st.sidebar.file_uploader("Upload your ratings.csv file", type=["csv"])

if uploaded_file:
    data = pd.read_csv(uploaded_file, names=['user_id', 'product_id', 'rating', 'timestamp'])

    # Drop timestamp
    data = data.drop('timestamp', axis=1)
    data["Num_Ratings_By_User"] = data.groupby("user_id")["rating"].transform("count")
    data["Num_Ratings_By_Item"] = data.groupby("product_id")["rating"].transform("count")

    # Filter data
    filtered_data = data[(data['Num_Ratings_By_User'] >= 30) & (data['Num_Ratings_By_Item'] >= 30)]
    matrix = filtered_data.pivot(index='user_id', columns='product_id', values='rating').fillna(0)

    # Sparse matrix
    sparse_matrix = csr_matrix(matrix.values)

    st.subheader("üìä Rating Distribution")
    fig1, ax1 = plt.subplots()
    sns.histplot(filtered_data['rating'], bins=10, kde=True, ax=ax1)
    ax1.set_title("Rating Distribution")
    st.pyplot(fig1)

    st.subheader("üî• Top 10 Rated Products")
    top_products = filtered_data['product_id'].value_counts().head(10)
    fig2, ax2 = plt.subplots()
    sns.barplot(x=top_products.index, y=top_products.values, ax=ax2)
    ax2.set_xticklabels(ax2.get_xticklabels(), rotation=90)
    st.pyplot(fig2)

    st.subheader("üîç Explore Product Similarity")
    cosine_sim = cosine_similarity(matrix.T)
    cosine_df = pd.DataFrame(cosine_sim, index=matrix.columns, columns=matrix.columns)

    selected_product = st.selectbox("Select a Product ID to see similar products", matrix.columns)
    if selected_product:
        st.write("Top 5 similar products:")
        st.dataframe(cosine_df[selected_product].sort_values(ascending=False)[1:6])

    st.subheader("üì¶ K-Means Clustering Visualization")

    std = StandardScaler()
    scaled_matrix = std.fit_transform(matrix)
    kmeans = KMeans(n_clusters=6, random_state=42)
    kmeans_labels = kmeans.fit_predict(scaled_matrix)

    pca = PCA(n_components=2)
    pca_result = pca.fit_transform(scaled_matrix)

    pca_df = pd.DataFrame(pca_result, columns=['PC1', 'PC2'])
    pca_df['Cluster'] = kmeans_labels

    fig3, ax3 = plt.subplots()
    sns.scatterplot(data=pca_df, x='PC1', y='PC2', hue='Cluster', palette='tab10', ax=ax3)
    ax3.set_title("K-Means Clustering")
    st.pyplot(fig3)

    # Save model
    with open("kmeans_model.pkl", "wb") as f:
        pickle.dump(kmeans, f)
    st.success("K-Means model saved as 'kmeans_model.pkl'.")

else:
    st.info("Please upload a ratings CSV file to continue.")

